qualif FALSE(v:int) : 1 = 0

qualif BEGIN(v:int) : BLOCK_BEGIN([v]) = BLOCK_BEGIN([~a]) 
qualif END(v:int) : BLOCK_END([v]) = BLOCK_END([~a]) 
qualif A(v:int) : ~a <= v 

qualif A(v:int) : 0 <= v
qualif A(v:int) : v <= 1
qualif A(v:int) : (v - ~a) = (4 * (@nsa - @len))

qualif A(v:int) : (2 * (v - @outp)) = 4 * ((@buf - 1) + @nsa - @len)
qualif A(v:int) : (2 * (v - @outp)) = 4 * ((0 - @buf) + @nsa - (@len - 1))
qualif A(v:int) : (2 * (v - @inp)) = 4 * ((@buf) + @nsa - @len)
qualif A(v:int) : (2 * (v - @inp)) = 4 * ((1 - @buf) + @nsa - (@len - 1))

