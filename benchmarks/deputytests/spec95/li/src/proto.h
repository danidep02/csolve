NODE *xeval(NODE *args);
NODE *xapply(NODE *args);
NODE *xfuncall(NODE *args);
NODE *xquote(NODE *args);
NODE *xfunction(NODE *args);
NODE *xlambda(NODE *args);
NODE *xbquote(NODE *args);
LOCAL NODE *bquote1(NODE *expr);
NODE *xset(NODE *args);
NODE *xsetq(NODE *args);
NODE *xsetf(NODE *args);
LOCAL void placeform(NODE *place,NODE *value);
NODE *xdefun(NODE *args);
NODE *xdefmacro(NODE *args);
LOCAL NODE *defun(NODE *args,NODE *type);
NODE *xgensym(NODE *args);
NODE *xmakesymbol(NODE *args);
NODE *xintern(NODE *args);
LOCAL NODE *makesymbol(NODE *args, int iflag);
NODE *xsymname(NODE *args);
NODE *xsymvalue(NODE *args);
NODE *xsymplist(NODE *args);
NODE *xget(NODE *args);
NODE *xputprop(NODE *args);
NODE *xremprop(NODE *args);
NODE *xhash(NODE *args);
NODE *xaref(NODE *args);
NODE *xmkarray(NODE *args);
NODE *xcond(NODE *args);
NODE *xcase(NODE *args);
LOCAL int keypresent(NODE *key,NODE *list);
NODE *xand(NODE *args);
NODE *xor(NODE *args);
NODE *xif(NODE *args);
NODE *xlet(NODE *args);
NODE *xletstar(NODE *args);
LOCAL NODE *let(NODE *args, int pflag);
NODE *xprog(NODE *args);
NODE *xprogstar(NODE *args);
LOCAL NODE *prog(NODE *args, int pflag);
NODE *xgo(NODE *args);
NODE *xreturn(NODE *args);
NODE *xprog1(NODE *args);
NODE *xprog2(NODE *args);
LOCAL NODE *progx(NODE *args, int n);
NODE *xprogn(NODE *args);
NODE *xdo(NODE *args);
NODE *xdostar(NODE *args);
LOCAL NODE *doloop(NODE *args, int pflag);
NODE *xdolist(NODE *args);
NODE *xdotimes(NODE *args);
NODE *xcatch(NODE *args);
NODE *xthrow(NODE *args);
NODE *xerror(NODE *args);
NODE *xcerror(NODE *args);
NODE *xbreak(NODE *args);
NODE *xcleanup(NODE *args);
NODE *xcontinue(NODE *args);
NODE *xerrset(NODE *args);
NODE *xevalhook(NODE *args);
LOCAL void dobindings(NODE *blist,NODE *env);
void doupdates(NODE *blist, int pflag);
int tagblock(NODE *code,NODE **pval);
void xlbreak(char *NTS emsg, NODE *arg);
void xlerror(char *NTS emsg, NODE *arg);
void xlcerror(char *NTS cmsg,char *NTS emsg, NODE *arg);
void xlerrprint(char *NTS hdr,char *NTS cmsg,char *NTS emsg, NODE *arg);
LOCAL void doerror(char *NTS cmsg,char *NTS emsg, NODE *arg, int cflag);
LOCAL void breakloop(char *NTS hdr,char *NTS cmsg,char *NTS emsg, NODE *arg, int cflag);
LOCAL NODE *stacktop(void);
void xlbaktrace(int n);
void xldinit(void);
NODE *cons( NODE *x,NODE *y);
NODE *consa( NODE *x);
NODE *consd( NODE *x);
NODE *cvstring( char *NTS str);
NODE *cvcstring( char *NTS str);
NODE *cvsymbol( char *NTS pname);
NODE *cvcsymbol( char *NTS pname);
//sm: NODE *cvsubr( NODE *(*fcn)(), int type);
NODE *cvsubr( NODE *(*fcn)(NODE*), int type);
NODE *cvfile( FILE *fp);
NODE *cvfixnum(FIXNUM n);
NODE *cvflonum(FLONUM n);
NODE *newstring(int size);
NODE *newobject(NODE *cls, int size);
NODE *newvector(int size);
LOCAL NODE *newnode(int type);
LOCAL char *NT COUNT(size) stralloc(int size);
LOCAL char *NTS strsave(char *NTS str);
void findmem(void);
void gc(void);
void mark(NODE *ptr);
void vmark(NODE *n);
LOCAL void sweep(void);
int addseg(void);
LOCAL int livecar(NODE *n);
LOCAL int livecdr(NODE *n);
void stats(void);
void xlminit(void);
NODE *xleval(NODE *expr);
NODE *xlxeval(NODE *expr);
NODE *xlapply(NODE *fun,NODE *args);
LOCAL NODE *evform(NODE *expr);
LOCAL NODE *evalhook(NODE *expr);
NODE *xlevlist(NODE *args);
void xlunbound(NODE *sym);
LOCAL NODE *evfun(NODE *fun,NODE *args,NODE *env);
void xlabind(NODE *fargs,NODE *aargs,NODE *env);
LOCAL int iskeyword(NODE *sym);
NODE *xread(NODE *args);
NODE *xprint(NODE *args);
NODE *xprin1(NODE *args);
NODE *xprinc(NODE *args);
NODE *xterpri(NODE *args);
LOCAL NODE *printit(NODE *args,int pflag,int tflag);
NODE *xflatsize(NODE *args);
NODE *xflatc(NODE *args);
LOCAL NODE *flatsize(NODE *args,int pflag);
NODE *xopeni(NODE *args);
NODE *xopeno(NODE *args);
LOCAL NODE *openit(NODE *args,char *NTS mode);
NODE *xclose(NODE *args);
NODE *xrdchar(NODE *args);
NODE *xpkchar(NODE *args);
NODE *xwrchar(NODE *args);
NODE *xreadline(NODE *args);
void xlinit(void);
int xlgetc(NODE *fptr);
int docommand(void);
int xlpeek(NODE *fptr);
void xlputc(NODE *fptr,int ch);
void xlflush(void);
int main(int argc,char *NTS *NT COUNT(argc-1) argv);
void stdprint(NODE *expr);
void stdputstr(char *NTS str);
void xlbegin(CONTEXT *cptr,int flags,NODE *expr);
void xlend(CONTEXT *cptr);
void xljump(CONTEXT *cptr,int type,NODE *val);
void xltoplevel(void);
void xlcleanup(void);
void xlcontinue(void);
void xlgo(NODE *label);
void xlreturn(NODE *val);
void xlthrow(NODE *tag,NODE *val);
void xlsignal(char *NTS emsg,NODE *arg);
LOCAL findtarget(int flag, char *NTS error);
NODE *xcar(NODE *args) ;
NODE *xcdr(NODE *args);
NODE *xcaar(NODE *args);
NODE *xcadr(NODE *args);
NODE *xcdar(NODE *args);
NODE *xcddr(NODE *args);
NODE *xcaaar(NODE *args);
NODE *xcaadr(NODE *args);
NODE *xcadar(NODE *args);
NODE *xcaddr(NODE *args);
NODE *xcdaar(NODE *args);
NODE *xcdadr(NODE *args);
NODE *xcddar(NODE *args);
NODE *xcdddr(NODE *args);
NODE *xcaaaar(NODE *args);
NODE *xcaaadr(NODE *args);
NODE *xcaadar(NODE *args);
NODE *xcaaddr(NODE *args);
NODE *xcadaar(NODE *args);
NODE *xcadadr(NODE *args);
NODE *xcaddar(NODE *args);
NODE *xcadddr(NODE *args);
NODE *xcdaaar(NODE *args);
NODE *xcdaadr(NODE *args);
NODE *xcdadar(NODE *args);
NODE *xcdaddr(NODE *args);
NODE *xcddaar(NODE *args);
NODE *xcddadr(NODE *args);
NODE *xcdddar(NODE *args);
NODE *xcddddr(NODE *args);
LOCAL NODE *cxr(NODE *args,char *NTS adstr);
NODE *xcons(NODE *args);
NODE *xlist(NODE *args);
NODE *xappend(NODE *args);
NODE *xreverse(NODE *args);
NODE *xlast(NODE *args);
NODE *xmember(NODE *args);
NODE *xassoc(NODE *args);
NODE *xsubst(NODE *args);
LOCAL NODE *subst(NODE *to,NODE *from,NODE *expr,NODE *fcn,int tresult);
NODE *xsublis(NODE *args);
LOCAL NODE *sublis(NODE *alist,NODE *expr,NODE *fcn,int tresult);
LOCAL NODE *assoc(NODE *expr,NODE *alist,NODE *fcn,int tresult);
NODE *xremove(NODE *args);
int dotest(NODE *arg1,NODE *arg2,NODE *fcn);
NODE *xnth(NODE *args);
NODE *xnthcdr(NODE *args);
LOCAL NODE *nth(NODE *args,int carflag);
NODE *xlength(NODE *args);
NODE *xmapc(NODE *args);
NODE *xmapcar(NODE *args);
NODE *xmapl(NODE *args);
NODE *xmaplist(NODE *args);
LOCAL NODE *map(NODE *args,int carflag,int valflag);
NODE *xrplca(NODE *args);
NODE *xrplcd(NODE *args);
NODE *xnconc(NODE *args);
NODE *xdelete(NODE *args);
NODE *xatom(NODE *args);
NODE *xsymbolp(NODE *args);
NODE *xnumberp(NODE *args);
NODE *xboundp(NODE *args);
NODE *xnull(NODE *args);
NODE *xlistp(NODE *args);
NODE *xconsp(NODE *args);
NODE *xeq(NODE *args);
NODE *xeql(NODE *args);
NODE *xequal(NODE *args);
/* WEIMER */
LOCAL NODE *cequal(NODE *args, int (*fcn)(NODE *, NODE *));
NODE *xadd(NODE *args);
NODE *xsub(NODE *args);
NODE *xmul(NODE *args);
NODE *xdiv(NODE *args);
NODE *xrem(NODE *args);
NODE *xmin(NODE *args);
NODE *xmax(NODE *args);
NODE *xexpt(NODE *args);
NODE *xbitand(NODE *args);
NODE *xbitior(NODE *args);
NODE *xbitxor(NODE *args);
LOCAL NODE *binary(NODE *args,int fcn);
void checkizero(FIXNUM iarg);
void checkfzero(FLONUM farg);
void checkfneg(FLONUM farg);
NODE *xbitnot(NODE *args);
NODE *xabs(NODE *args);
NODE *xadd1(NODE *args);
NODE *xsub1(NODE *args);
NODE *xsin(NODE *args);
NODE *xcos(NODE *args);
NODE *xtan(NODE *args);
NODE *xexp(NODE *args);
NODE *xsqrt(NODE *args);
NODE *xfix(NODE *args);
NODE *xfloat(NODE *args);
NODE *xrand(NODE *args);
LOCAL NODE *unary(NODE *args,int fcn);
NODE *xminusp(NODE *args);
NODE *xzerop(NODE *args);
NODE *xplusp(NODE *args);
NODE *xevenp(NODE *args);
NODE *xoddp(NODE *args);
LOCAL NODE *predicate(NODE *args,int fcn);
NODE *xlss(NODE *args);
NODE *xleq(NODE *args);
NODE *xequ(NODE *args);
NODE *xneq(NODE *args);
NODE *xgeq(NODE *args);
NODE *xgtr(NODE *args);
LOCAL NODE *compare(NODE *args,int fcn);
LOCAL void badiop(void);
LOCAL void badfop(void);
NODE *xlclass(char *NTS name,int vcnt);
void xladdivar(NODE *cls,char *NTS var);
//sm: void xladdmsg(NODE *cls,char *msg,NODE *(*code)());
void xladdmsg(NODE *cls,char *NTS msg,NODE *(*code)(NODE*));
NODE *xlsend(NODE *obj,NODE *args);
int xlobgetvalue(NODE *sym,NODE **pval);
int xlobsetvalue(NODE *sym,NODE *val);
LOCAL NODE *obisnew(NODE *args);
LOCAL NODE *obclass(NODE *args);
LOCAL NODE *obshow(NODE *args);
LOCAL NODE *obsendsuper(NODE *args);
//LOCAL NODE *clnew(void);
LOCAL NODE *clnew(NODE *args);
LOCAL NODE *clisnew(NODE *args);
LOCAL NODE *clanswer(NODE *args);
LOCAL NODE *entermsg(NODE *cls,NODE *msg);
LOCAL NODE *findmsg(NODE *cls,NODE *sym);
LOCAL NODE *sendmsg(NODE *obj,NODE *msg,NODE *args);
LOCAL int getivcnt(NODE *cls,int ivar);
LOCAL int listlength(NODE *list);
void xloinit(void);
void xlprint(NODE *fptr,NODE *vptr,int flag);
void xlterpri(NODE *fptr);
void xlputstr(NODE *fptr,char *NTS str);
LOCAL void putstring(NODE *fptr,char *NTS str);
LOCAL void putatm(NODE *fptr,char *NTS tag,NODE *val);
LOCAL void putdec(NODE *fptr,FIXNUM n);
LOCAL void putfloat(NODE *fptr,FLONUM n);
LOCAL void putoct(NODE *fptr,int n);
int xlload(char *NTS fname,int vflag,int pflag);
int xlread(NODE *fptr,NODE **pval,int rflag);
int readone(NODE *fptr,NODE **pval);
NODE *rmhash(NODE *args);
NODE *rmquote(NODE *args);
NODE *rmdquote(NODE *args);
NODE *rmbquote(NODE *args);
NODE *rmcomma(NODE *args);
NODE *rmlpar(NODE *args);
NODE *rmrpar(NODE *args);
NODE *rmsemi(NODE *args);
LOCAL NODE *phexnumber(NODE *fptr);
LOCAL NODE *plist(NODE *fptr);
LOCAL NODE *pvector(NODE *fptr);
LOCAL NODE *pquote(NODE *fptr,NODE *sym);
LOCAL NODE *pname(NODE *fptr,int ch);
LOCAL NODE *tentry(int ch);
LOCAL int nextch(NODE *fptr);
LOCAL int checkeof(NODE *fptr);
LOCAL void badeof(NODE *fptr);
//jc: rename from isnumber to avoid conflict with ctype.h
int isnum(char *NTS str,NODE **pval);
//sm: void defmacro(int ch,NODE *type,NODE *(*fun)());
void defmacro(int ch,NODE *type,NODE *(*fun)(NODE*));
NODE *callmacro(NODE *fptr,int ch);
int needsextension(char *NTS name);
void xlrinit(void);
NODE *xstrcat(NODE *args);
NODE *xsubstr(NODE *args);
NODE *xstring(NODE *args);
NODE *xchar(NODE *args);
//sm: void xlsubr(char *sname, int type, NODE *(*subr)());
void xlsubr(char *NTS sname, int type, NODE *(*subr)(NODE*));
NODE *xlarg(NODE **pargs);
NODE *xlmatch(int type,NODE **pargs);
NODE *xlevarg(NODE **pargs);
NODE *xlevmatch(int type,NODE **pargs);
void xltest(NODE **pfcn,int *ptresult,NODE **pargs);
NODE *xlgetfile(NODE **pargs);
void xllastarg(NODE *args);
int eq(NODE *arg1,NODE *arg2);
int eql(NODE *arg1,NODE *arg2);
int equal(NODE *arg1,NODE *arg2);
NODE *xlenter(char *NTS name,int type);
NODE *xlsenter(char *NTS name);
NODE *xlmakesym(char *NTS name,int type);
NODE *xlframe(NODE *env);
void xlbind(NODE *sym,NODE *val,NODE *env);
NODE *xlgetvalue(NODE *sym);
NODE *xlxgetvalue(NODE *sym);
NODE *xlygetvalue(NODE *sym);
void xlsetvalue(NODE *sym,NODE *val);
NODE *xlgetprop(NODE *sym,NODE *prp);
void xlputprop(NODE *sym,NODE *val,NODE *prp);
void xlremprop(NODE *sym,NODE *prp);
LOCAL NODE *findprop(NODE *sym,NODE *prp);
int hash(char *NTS str,int len);
void xlsinit(void);
NODE *xload(NODE *args);
NODE *xgc(NODE *args);
NODE *xexpand(NODE *args);
NODE *xalloc(NODE *args);
NODE *xmem(NODE *args);
NODE *xtype(NODE *args);
NODE *xbaktrace(NODE *args);
NODE *xexit(NODE *args);
void osinit(char *NTS banner);
int osrand(int n);
int osgetc(FILE *fp);
void osputc(int ch,FILE *fp);
void oscheck(void);
void osfinit(void);
void osfinish(void);
//sm: void xlfail(char *,...);
void xlfail(char *NTS);
void xlabort(char *NTS) __attribute__((noreturn));

// sm: removing this from circulation
//NODE ***xlsave(NODE **,...);

// replacing with many fixed-arg functions
NODE *** BND(xlstkbase, xlstktop) xlsave1(NODE **);
NODE *** BND(xlstkbase, xlstktop) xlsave2(NODE **, NODE**);
NODE *** BND(xlstkbase, xlstktop) xlsave3(NODE **, NODE**, NODE**);
NODE *** BND(xlstkbase, xlstktop) xlsave4(NODE **, NODE**, NODE**, NODE**);
NODE *** BND(xlstkbase, xlstktop) xlsave5(NODE **, NODE**, NODE**, NODE**, NODE**);
NODE *** BND(xlstkbase, xlstktop) xlsave6(NODE **, NODE**, NODE**, NODE**, NODE**, NODE**);
NODE *** BND(xlstkbase, xlstktop) xlsave7(NODE **, NODE**, NODE**, NODE**, NODE**, NODE**, NODE**);
