TODO
- [functions]	handling functions properly
- [arrays] 	fix consgen bug to use ploc returned by find before remove/add.
- [arrays]  	array-bounds checking assertions.
- [arrays]	null-deref assertion.
- [benchmarks] 	crunch deputy benchmarks into single file
- [globals]	fake with params

***************************************************************

[functions] : hookup with pat's code
- ensure pat produces proper annots. right now they are broken


***************************************************************
Fixing the malloc/init/unsoundness error
	- idea: when [Ins] is paired with a function-call instr, it refers to new
	  locations returned by call... This is bad, because you may want
	  to pass params _into_ functions to pass in params that can be
	  strongly updated...
	  For now, keep them apart.
	- for locations created by function calls, use [Ins] but 	
	[HERE]
	- spl. case for malloc in refanno, put in "New refanno"
	- spl. case for malloc in consgen, extend_world with [true] bindings ...

	- General function calls:
		- add [New] annots in refanno (to prevent bogus [Ins]
		  annots further downstream
		- extend_world with bindings generated by type of called
		  function...

malloc_T :: forall s. (x: int(4,T,{v| v>=0}))/emp -> ref(s,0, {v | size(v) = x})/ s|-> {T | True}

Misc. Notes:

- implicit assumption that C program is well-formed -- i.e. does not read
  undefined variables, how ? 
  	1. when undef var flows into phi, 
	   drop phi-var binding from env when phi-var on RHS of flow constr.
	2. ignore flows into phi-vars from undefined vars (ie no constraints)
  why not just add constraints ? because Cil's desugaring messes up paths,
  adds bogus flows into phi-var along infeasible paths 

- each cell returned by malloc has "true" values

- nuke the ghastly .bnd state threaded through theoremProverZ3.ml
- make the constraints "polymorphic" (so we can tag with src-locations *)

**************************************************************
**************************************************************
------------------------
while e do:
  s1
s2

---------equals---------

while (1) do: 
  if e: 
    [] 
  else: 
    goto L:;
  s1;
L: s2

---------equals---------

while (1) do:
  if (not e):
    goto L:
  else:
    []
  s1

L: s2

------------------------



