- [refanno] 	add support for conc-locs in signature	
		- write simple test + spec [postests/incp.c]
		- write code
		- make code run on test

Note: Let [f] be a function in the code. [f] requires either  
  (1) a "set" of locations (use [forall [A0...]] in spec), or
  (2) a "single" location (use [forall [C0...]] in spec).
	//either way, Rondon's annotation will mark the target as: 
	//[New(_,Ai)]
	//i.e. the instantiated location will be abstract


  if sig of [f] has
  (1) then body of [f] can un/fold locations from that set as before
  (2) then body of [f] cannot un/fold lcoations from the set. 
  
  To enforce the above, need heap wf to ensure that any given sig 
  can either quantify over an absloc OR over a concloc, but not both.

  Now, consider a callsite [f(x)]. 
  if sig of [f] has
  (1) then fold up whatever conc-loc [x] has (done already ?)
  (2) then if 
      (2a) [x] is the current owner, 
           do nothing i.e. don't fold
      (2b) [x] is not the current owner, 
           fold up current owner and make [x] the owner.

  Note that (2a) is ok, because throughout the call [f(x)], 
  the only use of the location will be through the concrete 
  instance corresponding to [x] -- no danger of folding and 
  then unfolding out a different location -- and so, can 
  happily do strong update.

  Now, implement the above and try [postests/incp.c]

***************************************************************
- [cluster] 	constraints by env in fixpoint
		- design simple (collapsed) tree structure
		- see how many bindings are there in (collapsed) tree structure

- [inline] 	boolean guards
- [specgen]	use C types to generate a "spec" file for each program,
		that is, create a candidate input type for each function.
		can be refined later.

- [double-bind] see WARNING generated by postests/ll4.c
- [globals]	
- [arrays]	add "memset" spec ?
- [unions]

** CLEANUP ****************************************************
- nuke the ghastly .bnd state threaded through theoremProverZ3.ml
- make the constraints "polymorphic" (so we can tag with src-locations *)
**************************************************************
------------------------
while e do:
  s1
s2

---------equals---------

while (1) do: 
  if e: 
    [] 
  else: 
    goto L:;
  s1;
L: s2

---------equals---------

while (1) do:
  if (not e):
    goto L:
  else:
    []
  s1

L: s2

------------------------



