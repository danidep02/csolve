- Scopes not quite right in WFC (?)
	- actually its ok -- those preds will be killed by solving.
	- in general can have preds over "x" for _any_ "x" in scope inside
	  a function...
	- we may want to prune later if inst causes a blowup.

- Solve.save -- add the saving of WF constraints (?)
- nuke the ghastly .bnd state threaded through theoremProverZ3.ml
- add regression test scripts 

**************************************************************
- return values
- formals

(1) connect formals to other local vars 
    i.e. if x is a formal, 
    make x the "first" dominating definition
    [DONE -- add phi-assignment for block-without-predecessors]

(2) add function templates to global environment
    HEREHEREHEREHEREHEREHEREHEREHEREHERE

(3) update Cil.exp -> reft to handle function calls
	-- rename t_single to t_exp
	-- t_exp :: W.cilenv -> Cil.typ -> Cil.expr -> C.reft  
	-- t_exp will use the env passed in to 
	   handle function calls (and ptr derefs etc)

(4) update consgen to add constraints for:
	-- callee params (via calls)
	-- function outputs (returns)
    
    In consinfra.m, add: 
    
    type flow = Var of Cil.varinfo * Cil.varinfo | ... (* cells *)
    
    (* extend the visitor so that we can enrich the API with *)
    block_flows : t -> int -> flow list

    (* extend consgen.ml so it generates constraints for each "flow" 
       inside a block *)

    cs_of_flow : env -> flow -> C.t list

**************************************************************
- globals
- pointers
**************************************************************
------------------------
while e do:
  s1
s2

---------equals---------

while (1) do: 
  if e: 
    [] 
  else: 
    goto L:;
  s1;
L: s2

---------equals---------

while (1) do:
  if (not e):
    goto L:
  else:
    []
  s1

L: s2

------------------------


