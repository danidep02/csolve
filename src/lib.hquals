qualif False(v:int)      : 1 = 0
qualif Zero(v: int)      : v = 0
qualif PosZ(v:int)       : 0 <= v
qualif Pos(v:int)        : 0 < v
qualif Unchecked(v:ptr)  : UNCHECKED([v]) = 1

qualif ZeroP(v:ptr)      : v = 0
qualif PosP(v:ptr)       : 0 < v
qualif PosZP(v:ptr)      : 0 <= v
qualif Begin(v:ptr)      : v = BLOCK_BEGIN([v])

qualif LowerBd(v:ptr)    : BLOCK_BEGIN([v]) <= v
qualif UpperBd(v:ptr)    : v < BLOCK_END([v])

qualif Valid(v:ptr)      : && [(0 < v); (BLOCK_BEGIN([v]) <= v); (v < BLOCK_END([v]))]
qualif NullOrValid(v:ptr): (v != 0) => (Valid(v))
qualif NullOrBegin(v:ptr): (v != 0) => (Begin(v))

//qualif NullOrValid(v:ptr): (v != 0) => && [(0 < v); (BLOCK_BEGIN([v]) <= v); (v < BLOCK_END([v]))]
//qualif NullOrBegin(v:ptr): (v != 0) => (v = BLOCK_BEGIN([v]))


qualif WordSize4(v:ptr)  : (v != 0) => ((BLOCK_END([v]) - v) >= 4)
qualif WordSize8(v:ptr)  : (v != 0) => ((BLOCK_END([v]) - v) >= 8)

//Commented out for tests/ft/ft_full.c 
//Uncomment after that
qualif Eq(v:int)         : v =  _
qualif Le(v:int)         : v <= _
qualif Ge(v:int)         : v >= _
qualif Lt(v:int)         : v <  _
qualif GT(v:int)         : v >  _

qualif SizeGt(v:ptr)     : BLOCK_BEGIN([v]) + _ <= BLOCK_END([v])
qualif RestGt(v:ptr)     : ((v + (4 * _)) <= BLOCK_END([v]))

qualif EqBegin(v:ptr,~a:ptr) : BLOCK_BEGIN([v]) = BLOCK_BEGIN([~a])
qualif EqEnd(v:ptr,~a:ptr)   : BLOCK_END([v]) = BLOCK_END([~a])
qualif EqBuf(v:ptr,~a:ptr)   : && [ EqBegin(v, ~a); EqEnd(v, ~a) ]

qualif Ge(v: ptr, ~a:ptr)    : v >= ~a 
qualif Eq(v: ptr, ~a:ptr)    : v =  ~a

qualif NullTerm(v: int) : (VVADDR = (BLOCK_END([VVADDR]) - 1)) => (v = 0)

// Generally useful for effect tracking
qualif NoWrite(v: ptr)   : EWRITE != 1
qualif NoRead(v: ptr)    : EREAD != 1

