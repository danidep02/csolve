qualif NODESZ(v:ptr) : BLOCK_BEGIN([v]) + 24 <= BLOCK_END([v])
qualif NODESZ(v:ptr) : (v != 0) => (BLOCK_BEGIN([v]) + 24 <= BLOCK_END([v]))

qualif NODEID(v:ptr) : (v != 0) => ((4*(DEREF([v]) : int)) = ((VVADDR - BLOCK_BEGIN([VVADDR])) : int))

qualif INTARR(v:ptr) : v + (4 * (~i+1)) <= BLOCK_END([v])

qualif SZLTONE(v:int) : v < (@sz - 1)

qualif PERMARR(v: int): && [v >= 0; v < ~sz]

qualif NNSIZE(v: ptr) : (v != 0) => (v + (4 * ~i) <= BLOCK_END([v]))

qualif LSTPTRA(v: ptr) : v = (DEREF([~x]) : ptr)
qualif LSTPTRB(v: ptr) : v = BLOCK_BEGIN([v]) + (4 * _)
qualif LSTPTRC(v: ptr) : v = BLOCK_BEGIN([v]) + 4

qualif SZB(v:ptr) : BLOCK_BEGIN([v]) + 8 <= BLOCK_END([v])

qualif ADDRWR(v:ptr) : v = (DEREF([~x]) : ptr)

qualif A(v:ptr) : VVADDR = DEREF([~x]) + 4
qualif THING(v:ptr) : v = DEREF([VVADDR]) + 4

qualif P(v:ptr) : (4*(DEREF([BLOCK_BEGIN([v])]) : int)) + 4 = (VVADDR - BLOCK_BEGIN([VVADDR]))
