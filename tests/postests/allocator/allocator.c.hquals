// Lib
// qualif NN   (v : int) : v > 0
// qualif NN   (v : int) : v >= 0
qualif SZ12 (v : ptr) : (v != 0) => (BLOCK_END([v])) = (BLOCK_BEGIN([v]) + 12)
// qualif BB   (v : ptr) : (v != 0) -> (v >= BLOCK_BEGIN([v]))

// Real
qualif PL8  (v : ptr) : (v != 0) => ((v - 8) > 0)
qualif SZ   (v : ptr) : (BLOCK_END([v])) = v + ~A

qualif P8   (v : ptr) : (v != 0) => (v = (BLOCK_BEGIN([v]) + 8))

qualif BSZ  (v : ptr) : (v != 0) => (BLOCK_END([v]) = (v + (DEREF([v - 8]): int)))
qualif BSZ  (v : ptr) : (v != 0) => (BLOCK_END([v]) = (BLOCK_BEGIN([v]) + 8 + (DEREF([v]): int)))
qualif BSZ  (v : ptr) : (v != 0) => ((DEREF([v]): int) = ~A)
qualif NXT  (v : ptr) : (v != 0) => (~A < (DEREF([v]): int))

// Common?
qualif SZ8  (v : ptr) : (v != 0) => (BLOCK_END([v])) >= (BLOCK_BEGIN([v]) + 8)

qualif ARRAYOFF(v:ptr) : v = (BLOCK_BEGIN([v]) + 8)

// pmr: Drop when we start inferring quals
qualif ARRAYMOD(v:ptr) : ((v - BLOCK_BEGIN([v])) mod 12) = 0