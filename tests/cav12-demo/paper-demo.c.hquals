//// Program-specific quals

qualif RELSTR(v: ptr, ~a: int): (BLOCK_END([v]) - v) >= ~a
qualif GEQPTR(v: ptr, ~a: ptr): (v != 0) => (v >= ~a)
// Only needed for strnchr?
qualif NNEQBLOCK(v: ptr, ~a: ptr): (v != 0) => && [BLOCK_BEGIN([v]) = BLOCK_BEGIN([~a]); BLOCK_END([v]) = BLOCK_END([~a])]
qualif TRACKSTR(v: ptr, ~a: ptr, ~b: int, ~c: int): v = (~a + (~b - ~c))
qualif PLUSS(v: ptr, ~a: ptr, ~b: int): (v != 0) => (v < ~a + ~b)
qualif SZ12(v: ptr): (v != 0) => ((BLOCK_END([v]) - BLOCK_BEGIN([v])) = 12)

//// Lib quals

qualif PosZ(v:int)       : 0 <= v
// Add block_begin here? Might need it separately
qualif Valid(v:ptr)      : && [ 0 < v; BLOCK_BEGIN([v]) <= v; v < BLOCK_END([v]) ]
qualif NullOrBegin(v:ptr): (v != 0) => (v = BLOCK_BEGIN([v]))
qualif Ge(v: ptr, ~a:ptr)    : v >= ~a 