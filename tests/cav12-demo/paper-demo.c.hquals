qualif RELSTR(v: ptr, ~a: int): (BLOCK_END([v]) - v) >= ~a
qualif GEQPTR(v: ptr, ~a: ptr): (v != 0) => (v >= ~a)
qualif NNEQBLOCK(v: ptr, ~a: ptr): (v != 0) => && [BLOCK_BEGIN([v]) = BLOCK_BEGIN([~a]); BLOCK_END([v]) = BLOCK_END([~a])]
qualif TRACKSTR(v: ptr, ~a: ptr, ~b: int, ~c: int): v = (~a + (~b - ~c))
qualif PLUSS(v: ptr, ~a: ptr, ~b: int): (v != 0) => (v < ~a + ~b)
qualif SPLIT(v: ptr, ~a: int): (~a >= 0) => ((v + ~a) <= BLOCK_END([v]))