* TODO Heapify locals modified in concurrent blocks
  Use CIL name hacks?
* TODO Check that induction variable i in foreaches can't escape scope
* TODO Don't track effects for function locations
  They can't be written, so there can't be conflicts.
* TODO Should join_effects do anything with concrete locations?

* TODO Capture-avoiding substition in fixInterface
  See the test in tests/postests.

* TODO Check WF of foreach blocks
* TODO Refactor all fixinterface wrappers so locs come first
  Kill a lot of the boilerplate wrapper code by allowing one wrapper
  that takes the loc and string description.

* TODO Effects from library functions?
  They're all true right now.
* TODO Check block structure is ok
  For each "routine" in a cobegin block, we need to be sure that
  control flow remains within that routine, otherwise the effect of
  that routine does not follow the block structure and we won't track
  its effect properly.

* TODO Location mismatch - friendlier errors?

* TODO Failed constraints on the *specs* of functions

* TODO Better tracking of slocs, where they map, errors, etc.

* TODO More elegant way of backing off defaults for annotations?
  If we give any annotation at all, we lose all the defaults. Do we
  really want this?

* TODO What's happening with check_pos
  Why is it that CHECK_TYPE does or doesn't make things ok?

* TODO Untangle knot of pre_env, env, etc.
  Some constraints need to be generated in the environment that was
  present *before* any unfolding happened...

* TODO Does create_shapeo need to fresh the store?
* TODO Find a way to incorporate sizeofs in predicates

* TODO Find a way to incorporate sizeofs in hquals
  Probably whatever we do to the parser for the first part will work
  here also.

* TODO Consolidate uses of constrain_lval + ctype_of_lval in inferctypes
* TODO Read-only extern variables?
  Consider variables like optind. It's not enough to say that optind has
  the type

    {V > 0},

  since sometimes, like after calls to getopt functions, we want to
  additionally know that optind has a value <= argc. But because
  optind is extern, we only allow it to take on the specified type,
  i.e., V > 0.  So we either want to have a way to make optind
  read-only in the client program and vary its type or allow
  "overlays" on top of the speicified type. (The latter seems more
  promising.)
* TODO Effects with just the single set of effects

* TODO Effects where fresh effects are needed
  Effect is the same effect as the closest enclosing coroutine, or
  global effect if none exists. (Which we should be able to get by
  idom.) -- No, can't use idom for this, it would skip over
  intermediate blocks. But we should be able to do a separate
  traversal using just the immediate subblock relation, where we get
  the effects for each block.

* TODO How to check extern specs against the appropriate functions?

* TODO Ensure that the ctypes/refinement knot is tied tightly

* TODO Refactor/merge various index manipulations
  shapeinfra/ref_index, typespec/indexOfArrayElements, and do the
  former have anything to do with scalarCtypes/ref_index_of_pred?

* TODO Check that indices are covered in subtyping
  Don't silently leave unconstrained vars around

* TODO How to prevent the user from thinking a location is global when it isn't?
  Or what error could've been caught earlier in the foo quantification
  example?

  Don't allow "GLOBAL" anywhere but on the function variable itself.

* TODO close_stdin () should have heap signature
  It modifies the stdin location. This means atexit has to be
  polymorphic over its heap. Other consequences?

* TODO Error messages for unified locations are atrocious
  They don't give you any clue about what happened at all.

* TODO Write docs for spec language

* TODO Notify when unifying annotated locations

* TODO Check on refstore_subs_locs and quantifiers
  It's substituting over the whole store using Store.map, which isn't
  kosher w.r.t. quantifiers. While it would be nice to maintain the
  invariant that all quantified locations are distinct from whatever's
  getting substituted, this seems very hard to maintain as we
  instantiate and create new functions. We should instead change this
  use of map to a saner instantiation.
* TODO Should const qualifier mark locations' contents as FINAL?

* TODO Attach error/warning messages to specific type obligations
  This would allow more user-friendly error messages when a function
  is called with invalid arguments.

* TODO Fix make_cs_assert so that generated constraints are live
  Fixpoint ignores them because they don't have the right form.


* Soon

** TODO Investigate unquantified_write global scalar type issue

** TODO Heap polymorphism for function pointers

** Refactor ctype -> location, index methods
   Just fail fast instead of returning option

** TODO Sort out "'a preblah" mess in ctypes.mli
   It shouldn't be necessary to ever have these in the interface
   except for map-style functions.

** TODO Add function types for builtin operators
   It would be much more convenient to change the type of *, /, etc.
   by changing a function type.

* Long-Term Goals, Present Unsoundnesses, Expressiveness Problems, and Warts

** Handling string-manipulating functions
   We can't say we're handling string-manipulating external functions
   correctly unless we can express containing a NULL character within
   the bounds of the string.


** Contextual types for terminators vs. argv
   It turns out that argv is null-terminated --- in particualr, argv[argc] = '\0';
   coreutils' "yes" program takes advantage of this:

   #+BEGIN_SRC c
        if (argc <= optind)
         {
           optind = argc;
           argv[argc++] = bad_cast ("y");
         }
     
       while (true)
         {
           int i;
           for (i = optind; i < argc; i++)
             if (fputs (argv[i], stdout) == EOF
                 || putchar (i == argc - 1 ? '\n' : ' ') == EOF)
               {
                 error (0, errno, _("standard output"));
                 exit (EXIT_FAILURE);
     
                 return 0;
               }
         }
   #+END_SRC

   Both at the start of the program and after the "if", we know that
   everything in argv that comes before argv[argc] must be non-null.


** realloc, free
   In general, we don't know that a pointer's bounds stay valid
   through the lifetime of the memory region.  We treat free() as a
   nop and realloc() the same as malloc().

** TODO coreutils' quotearg functions
   Check whether the contracts we give these are sound approximations
   of what the functions do under the assumptions about realloc and
   free. (Is there a way we can automate this process?)

** vararg functions

** Abstract types
   The coreutils modechange.h does not give the definition of the
   mode_change structure, but we need it to at least take the size of
   the structure.  In general, we assume we know the definitions of
   all structures, which is unrealistic --- we won't --- and
   inefficient --- we can probably get by with a lot fewer kvars if we
   treat some structures as completely opaque.

** Other kinds of terminators
   The getopt library requires an all-zero struct to terminate the
   options array.

** Automatically cataloging sources of unsoundness
   Would be nice to show automatically what assumptions are being made
   about a benchmark (unsound casts, null-terminated strings,
   unverified external functions). See later section on stuff to do
   before release.

** TODO Bounded location polymorphism
   It would be handy to mark "read-only" locations as such using
   bounded location polymorphism. This allows polymorpism over the the
   particular indices and refinements of the accessed parts of the
   heap and would be a good place to drop in physical subtyping.


** TODO Have lcc_assume check for consistency of assumption?


** TODO Relating return values and errno?

** TODO Specs for how functions manipulate globals
   For example, the various getopt functions set optind in various
   ways. We want to guarantee that the (heapified) value optind is
   within some range after a call to getopt-like functions (and also
   enforce that it's in some range when they're called). Find a way to
   specify such pre/postconditions on globals.

* Plausible benchmarks

** GNU diction
   See sentence.c, which takes in a "process" argument.
   Diction passes diction() to sentence(), so the safety of
   diction() depends on the invariants established by
   sentence().

** coreutils stuff
   Note that coreutils is split into lib/ and src/. For the moment,
   I've only looked at src/ stuff, but to verify the whole thing we'll
   have to look at lib/, too.

*** Programs

**** TODO mkdir
     Very small - 200 lines - and very simple use of function pointers.

     But this requires polymorphism over heaps when using function pointers!
     So this one is on hold.

**** DONE (...?) sum
     Checksumming function, less than 300 lines.

**** (RJ BLOCKED: simplification leaves &x in code) tsort
     Program for topologically sorting a graph, less than 600 lines.

**** (RJ BLOCKED: cannot simplify labeled instruction) stat
     About 1.5k lines, small bit of function pointer action.

**** (RJ BLOCKED: cannot simplify labeled instruction) od 
     Large at 2k lines, uses function pointers for formatting options, it seems.

**** (RJ BLOCKED: cannot simplify labeled instruction) dd
     Seems to have function pointers, but it's on the big side at 2k lines.

**** (RJ BLOCKED: uses unions, and below cannot represent integer issue) tr
     Another 2k large program, parameterized by function for reading from the buffer.

**** (RJ BLOCKED:  Unimplemented: Cannot represent integer 18446744073709551615ULL in 64 bits (signed)) pr
     Formats text, uses print_func and char_func to process lines and characters,
     almost 3k lines.

**** ls
     Tons of function pointers, but about 4k lines.

*** Libraries

**** With Function Pointers, Without void * Polymorphism

***** lib/argv_iterc.c
      Functions for iterating over argv. Hot function pointer action.

***** lib/exclude.c
      See matcher in exclude_fnmatch, add_func in add_exclude file.

***** lib/fts.c, lib/xfts.c
      See (*compar), (*compare), etc.

***** lib/xstrtod.c

***** lib/at-func2.c
      Some crazy voodoo going on here.

***** lib/mktime.c
      ranged_convert() takes in a function for time conversion.

***** lib/close-hook.[ch]
      Calls list of function pointers for doing stuff on socket/file close.

***** lib/long_options.c
      Uses a function pointer for printing usage information, but no
      exciting invariants here.

***** lib/sig-handler.h

***** lib/sigaction.c

***** lib/sigprocmask.c

**** With Function Pointers, With void * polymorphism

***** lib/heap.c

***** lib/hash.[ch]

***** lib/mkancesdrs.c, lib/mkdir-p.c

***** lib/mpsort.c

***** lib/obstack.c

***** lib/randread.c

***** lib/savewd.c

***** lib/savewd.c

***** lib/setenv.c


**** No Function Pointers

***** lib/quote.c
      Functions for quoting strings.

      quotearg_buffer_restyled() in particular is rather involved.

***** lib/modechange.c
      Functions for manipulating file access modes.


** 072.sc (spreadsheet?)
   Part of the SPEC benchmark suite. Only two indirect calls, I
   suspect no memory safety invariant.

** find (GNU find)
   Large number of indirect calls.

** minicom

** m4
   See uses of the type builtin_func --- TOKEN_DATA_FUNC, SYMBOL_FUNC, etc.

** less
** unzip

* Implausible benchmarks

** gdbm (GNU database)
   Has one indirect call, not really anything happening here.

** aspell
   Written in C++.

** dico
   Big but not a lot of interesting function pointers --- odd, because
   there's supposed to be a lot of "pluggability" in it.

* Related papers

** Milanova et al, Precise Call Graphs for C Programs with Function Pointers
   Good breakdown of the uses of function pointers and common
   idioms. Some of the above benchmarks are mentioned.

Proper code todo:

* Warn/error on unreachable block?

* TODO Release Code
  Would be nice to do this by the end of August (can't do it much
  sooner due to POPL deadline, jury duty, and traveling). Subgoals:

** TODO make distclean target
   Should remove code we don't have a license to redistribute (e.g., z3), the
   git directories, utility scripts, etc.

** TODO Clean up postests, negtests
   Surely not all of them are necessary, their naming can be mysterious, etc.

** TODO Organize benchmarks according to paper/provenance
   Should be simple to go in and find the POPL 10 benchmarks and run them.

** TODO Clean up benchmarks
   Undo any code mangling which may now be unnecessary.

** TODO Review the code
   Kill any outstanding TODOs or unnoted unsoundnesses.

** TODO Less verbose output at default level --- dump to log instead
   Most stuff has been changed to go to liquidc.log instead of stdout.
   It would be handy to allow fixpoint to log there also.

** TODO Better attribution for modified CIL modules
   See psimplify, lcc, etc.

** TODO Better type output
   Label fields in output types with their C names when possible and
   allow the use of C names in specs.

** TODO Better output browsing
   Would be nice to have Emacs support for viewing the type
   annotations.  In particular, it would be nice to point somewhere
   and bring up a buffer with all the types of locals in scope, the
   heap types, and the type of the current function. This would be
   extra handy in debugging because you could copy and paste this
   information and then cut it down to what's truly useful. (Some kind
   of automatic slicing would be even better.)

** TODO Better unsoundness accounting
   It would be nice to have a log, for each benchmark, of the constructs
   that were treated unsoundly, perhaps grouped by cause, as in:

     Not checking that string is null-terminated...
     ==============================================
     ...in call to strlen (foo.c:420)
     ...in call to strcmp (bar.c:LVIII

   Unfortunately, arithmetic is everywhere and we don't check for overflow,
   so we have to also have a section for global warnings.

   To give the above error message, we should associate function specs
   with unsoundness comments, which are dumped into the log every time
   the function is called. (It'll be interesting to handle this with
   function pointers! Very blamey.)

** TODO Simple web demo
   Will require some work above and beyond the dsolve stuff because
   the type annotations are very different.

** TODO Reasonable manual
   A plain markdown file with examples covering dropping in place of
   GCC (don't forget to turn off optimization!), writing specs and
   hquals, invocation and options, limitations and unsound constructs,
   and tips and tricks.

* Breadcrumbs

** TODO Consolidate specs involving stdin, stdout, printers, etc.
   Added stuff to cacm, call_with_global
